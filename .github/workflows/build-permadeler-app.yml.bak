name: Build and Publish Papyrus Application

on:
  push:
    paths-ignore:
      - "doc/**"
    branches:
      - "**"
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18.7
          registry-url: https://npm.pkg.github.com/

      - name: Setup Java SDK
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 11

      - name: Setup some global environment variables
        run: |
          echo "git_describe=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "app_version_latest=$(grep version frontend/package.json | awk -F \" '{print $4}')" >> $GITHUB_ENV

      - name: Build frontend
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          echo '//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}' >> .npmrc
          npm ci
          npm run-script format-lint
          npm run build
        working-directory: frontend

      - name: Copy frontend artifacts
        run: |
          mkdir -p backend/papyrus-web-frontend/src/main/resources/static
          cp -R frontend/build/* backend/papyrus-web-frontend/src/main/resources/static

      - name: Build backend with Maven
        env:
          USERNAME: ${{ secrets.USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
        run: |
          mvn -U -B clean verify -f backend/pom.xml --settings settings.xml

      - name: Configure AWS CLI for Obeo Cloud Platform
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Login to Amazon Elastic Container Registry
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build the Docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: papyrus-web
          IMAGE_TAG: ${{ env.git_describe }}
        run: |
          sed -e "s|VERSION|${{ env.app_version_latest }}|" backend/papyrus-web-application/Dockerfile.template > backend/papyrus-web-application/Dockerfile
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t $REGISTRY/$REPOSITORY:latest backend/papyrus-web-application

      - name: Upload the Docker image to AWS ECR
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: papyrus-web
          IMAGE_TAG: ${{ env.git_describe }}
        run: |
          docker push $REGISTRY/$REPOSITORY --all-tags

      - name: Upload the Docker configuration for AWS Elastic Beanstalk
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: papyrus-web
          IMAGE_TAG: ${{ env.git_describe }}
        run: |
          sed -e "s|IMAGE_NAME|$REGISTRY/$REPOSITORY:$IMAGE_TAG|" Dockerrun.aws.json.template > Dockerrun.aws.json
          aws s3 cp Dockerrun.aws.json s3://papyrus-web-deployment/integration/${{ env.git_describe }}/Dockerrun.aws.json

      - name: Create a new ElasticBeanstalk Application Version for Papyrus Web
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: aws elasticbeanstalk create-application-version --application-name "Papyrus Web" --source-bundle S3Bucket="papyrus-web-deployment",S3Key="integration/${{ env.git_describe }}/Dockerrun.aws.json" --version-label "${{ env.git_describe }}" --description "${{ github.sha }}"

      - name: Deploy a new ElasticBeanstalk Application Version for Papyrus Web
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: aws elasticbeanstalk update-environment --environment-name "papyrus-web-staging" --version-label "${{ env.git_describe }}"

      - name: Upload fat jar into s3
        if: startsWith(github.ref, 'refs/tags/v')
        run: aws s3 cp backend/papyrus-web-application/target/papyrus-web-application-${{ env.app_version_latest }}.jar s3://papyrus-web-deployment/papyrus-web-application-${{ env.app_version_latest }}.jar
        
      - name: Store fat-jar as artifact
        uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          name: papyrus-web-application-latest
          path: backend/papyrus-web-application/target/papyrus-web-application-${{ env.app_version_latest }}.jar
          retention-days: 150